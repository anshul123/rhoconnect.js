RhoConnect.js API Reference
===
Rhoconnect.js API implemented as public fields of global *RhoConnect* object. Those are methods and *ERRORS* hash.

## Methods

### Initialization and data access

- *RhoConnect.login(username, password, doDataReset)* - Authenticates application on the server, returns *promise* object. Arguments are:
    - *username* - User name to authenticate with
    - *password* - Password
    - *doDataReset* - (optional, default is *false*) - Boolean value, true means to do database reset before login.
- *RhoConnect.init(modelDefinitions, dataApiType, syncProgressCallback)* - Performs rhoconnect.js and data API initialization, returns *promise* object. Arguments are:
    - *modelDefinitions* (mandatory) - Model definitions array, see Getting Started guide for the sample.
    - *dataApiType* (optional) - Use string values:
        - 'extjs' - Do initialize ExtJS/SenchaToush data API to use as application data storage.
        - 'persistencejs' - Do initialize Persistence.js data API to use as application data storage.
        - 'custom' or *null* - Don't initialize any data API, perform data API initialization in custom code.
    - *syncProgressCallback* (optional) - Progress update callback function to use. The only function argument is the model name, which has just been synchronized.
- *RhoConnect.logout()* - Disconnects application from the server, returns *promise* object. Have no arguments.
- *RhoConnect.isLoggedIn()* - Returns *true* value if aplication is logged in on the server. Have no arguments.
- *RhoConnect.syncAllSources()* - Synchronize application data with the RhoSync server, returns *promise* object. Have no arguments.
- *RhoConnect.dataAccessObjects()* - Returns the hash of data access objects which are data API specific. Have no arguments. In returned hash object the *key* is model name and the *value* is instances of:
    - [Ext.data.Store](http://dev.sencha.com/deploy/touch/docs/) - for 'extjs' type of data API
    - [model](http://persistencejs.org/objects) - for 'persistencejs' type of data API

### Synchronization notifications

- *RhoConnect.setModelNotification(modelName, callback, removeAfterFire) - Set handler for exact *model* synchronization notification. Arguments are:
    - *modelName* - Name of model to listen notifications for.
    - *callback* - Handler function. Receives the only argument *notificationBody*, it is a hash with fields:
        - *source_name* - The name of model just synchronized.
        - *total_count* - The total *objects* count for the *model*.
        - *processed_count* - The number of *objects* that have been processed so far for a *model* may be *0* if all objects have already been processed.
        - *status* - Is undefined while *inPprogress* value is *true*. When finished it is a string value:
            - "ok" - Synchronization of exact model has been performed without errors.
            - "error" - Errors happened during synchronization process.
        - *errorCode* - Code of synchronization error. Is undefined if no errors happened. Look at RhoConnect.ERRORS description for details.
        - *errorMessage* - Synchronization error message. Is undefined if no errors happened.
    - *removeAfterFire* - Clear notification subscription after notification event if true. The same if handler function returns true.
- *RhoConnect.clearModelNotification(modelName) - Reset handler for *model* synchronization notification. Arguments are:
        - *modelName* - Name of model to reset the handler.
- *RhoConnect.setAllNotification(callback, removeAfterFire) - Set handler for all *models* synchronization notifications. Arguments are:
    - *callback* - Handler function. Receives the only argument *notificationBody*, it is a hash with fields:
        - *inProgress* - Boolean value *true* if synchronization still in a progress, *undefined* value if synchronization finished.
        - *status* - Is undefined while *inPprogress* value is *true*. When finished it is a string value:
            - "complete" - Synchronization of all models have been performed without errors.
            - "error" - Errors happened during synchronization process.
        - *errorCode* - Code of synchronization error. Is undefined if no errors happened. Look at RhoConnect.ERRORS description for details.
        - *errorMessage* - Synchronization error message. Is undefined if no errors happened.
    - *removeAfterFire* - Clear notification subscription after notification event if true. The same if handler function returns true.
- *RhoConnect.clearAllNotification() - Reset handler for all *models* synchronization notifications.
- *RhoConnect.setObjectsNotification(callback, removeAfterFire) - Set handler for all *object* change notifications. Arguments are:
    - *callback* - Handler function. Receives the only argument *notificationBody*, it is a hash with fields:
        - *updated* - Array of hashes for updated objects. Every hash object has form of: *{objectId: objId, sourceId: srcId}*, where:
            - *objectId* - Is *id* of updated *object*.
            - *modelName* - The name of object *model*.
        - *created* - Array of hashes for created objects. Every hash object has form of: *{objectId: objId, sourceId: srcId}*, where:
            - *objectId* - Is *id* of updated *object*.
            - *modelName* - The name of object *model*.
        - *deleted* - Array of hashes for deleted objects. Every hash object has form of: *{objectId: objId, sourceId: srcId}*, where:
            - *objectId* - Is *id* of updated *object*.
            - *modelName* - The name of object *model*.
- *RhoConnect.clearObjectsNotification() - Reset handler for all *object* change notifications.
- *RhoConnect.addObjectNotify(modelName, objectId) - Subscribe exact object for changes notification.  Arguments are:
    - *modelName* - The name of object *model*.
    - *objectId* - The *id* of object.
- *RhoConnect.clearObjectsNotify() - Unsubscribe all objects from changes notification.


## Errors
Are defined as:

    RhoConnect.ERRORS = {
        ERR_NONE: 'No error',
        ERR_NETWORK: 'Network error',
        ERR_REMOTESERVER: 'Remote server access error',
        ERR_RUNTIME: 'Runtime error',
        ERR_UNEXPECTEDSERVERRESPONSE: 'Unexpected server response',
        ERR_DIFFDOMAINSINSYNCSRC: 'Different synchronization domain error',
        ERR_NOSERVERRESPONSE: 'No server response',
        ERR_CLIENTISNOTLOGGEDIN: 'Client not logged in',
        ERR_CUSTOMSYNCSERVER: 'Custom sync server',
        ERR_UNATHORIZED: 'Unauthorized access',
        ERR_CANCELBYUSER: 'Canceled by user',
        ERR_SYNCVERSION: 'Synchronization version error',
        ERR_GEOLOCATION: 'Geolocation error'
    };

## Returned values
API methods returns object instance of jQuery *promise* type. On success the *done* handler is called. On failure the *fail* handler is called with following arguments:
- *errCode* - The error code value from *RhoConnect.ERRORS*
- *errorMessage* - More detailed error message if available.
